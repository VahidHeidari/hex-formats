#include <iostream>

#include "intel-hex.h"

using namespace std;

void test_intel_hex()
{
	cout << "This is intel hex format test!" << endl;

	// Examples from 'http://en.wikipedia.org/wiki/Intel_HEX'.
	const uint8_t example_dta[] = { 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x67, 0x61, 0x70 };
	const uint8_t example_esa[] = { 0x12, 0x00 };
	const uint8_t example_ssa[] = { 0x00, 0x00, 0x38, 0x00 };
	const uint8_t example_ela[] = { 0xFF, 0xFF };
	const uint8_t example_sla[] = { 0x00, 0x00, 0x00, 0xCD };

	// Example from: http://en.wikipedia.org/wiki/Intel_HEX
	const char* test2 =
		":10010000214601360121470136007EFE09D2190140\n"
		":100110002146017E17C20001FF5F16002148011928\n"
		":10012000194E79234623965778239EDA3F01B2CAA7\n"
		":100130003F0156702B5E712B722B732146013421C7\n"
		":00000001FF\n";

	// Test case.
	const uint8_t data[] =
	{
		0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xAA,
		0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xD6, 0x95, 0x6a, 0x0A, 0x10, 0x30, 0xDC, 0xAA,
		0x10, 0x31, 0x00, 0xA3, 0x5E, 0x0A, 0x10, 0x31, 0xFF, 0xA4, 0x5F, 0x07, 0x1C, 0x30, 0xFF, 0xAA,
		0x10, 0x2C, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x6a, 0x4D, 0x10, 0x30, 0xBC, 0xAA,
		0x10, 0x27, 0xCE, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x47, 0x6F, 0xA9, 0xAA,
		0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xAA,
		0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xD6, 0x95, 0x6a, 0x0A, 0x10, 0x30, 0xDC, 0xAA,
		0x10, 0x31, 0x00, 0xA3, 0x5E, 0x0A, 0x10, 0x31, 0xFF, 0xA4, 0x5F, 0x07, 0x1C, 0x30, 0xFF, 0xAA,
		0x10, 0x2C, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x6a, 0x4D, 0x10, 0x30, 0xBC, 0xAA,
		0x10, 0x27, 0xCE, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x47, 0x6F, 0xA9, 0xAA,
		0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xAA,
		0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xD6, 0x95, 0x6a, 0x0A, 0x10, 0x30, 0xDC, 0xAA,
		0x10, 0x31, 0x00, 0xA3, 0x5E, 0x0A, 0x10, 0x31, 0xFF, 0xA4, 0x5F, 0x07, 0x1C, 0x30, 0xFF, 0xAA,
		0x10, 0x2C, 0xFF, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x6a, 0x4D, 0x10, 0x30, 0xBC, 0xAA,
		0x10, 0x27, 0xCE, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x47, 0x6F, 0xA9, 0xAA,
		0x10, 0x27, 0xCE, 0xA3, 0x5E, 0x0A, 0x10, 0x30, 0xFF, 0xA3, 0x5E, 0x0A, 0x47, 0x6F, 0xA9, 0xAA,
		0x00
	};

	IntelHex h("test.hex");

	// Testing write_record() method.
	h.set_record_bytes(sizeof(example_dta));
	h.set_record_type(IntelHex::RECORD_TYPE_DATA);
	h.set_address(0x0010);
	h.write_record(example_dta);

	//h.write_end_of_file();

	h.set_record_bytes(sizeof(example_esa));
	h.set_record_type(IntelHex::RECORD_TYPE_EXTENDED_SEGMENT_ADDRESS);
	h.set_address(0);
	h.write_record(example_esa);

	h.set_record_bytes(sizeof(example_ssa));
	h.set_record_type(IntelHex::RECORD_TYPE_START_SEGMENT_ADDRESS);
	h.set_address(0);
	h.write_record(example_ssa);

	h.set_record_bytes(sizeof(example_ela));
	h.set_record_type(IntelHex::RECORD_TYPE_EXTENDED_LINEAR_ADDRESS);
	h.set_address(0);
	h.write_record(example_ela);

	h.set_record_bytes(sizeof(example_sla));
	h.set_record_type(IntelHex::RECORD_TYPE_START_LINEAR_ADDRESS);
	h.set_address(0);
	h.write_record(example_sla);

	h.set_record_bytes(0x10);
	h.set_record_type(IntelHex::RECORD_TYPE_DATA);
	cout << "Number of bytes has been writen : " << h.write(data, sizeof(data)) << endl;
	h.close();

	// Write test2.hex to file.
	ofstream test2_file("test2.hex");
	test2_file << test2;
	test2_file.close();

	cout << "Integrity of file check : " << boolalpha << h.check_integrity("test2.hex") << endl;
	cout << "Integrity of file check : " << boolalpha << h.check_integrity("test.hex") << endl << endl;
}

void test_motorola()
{
	cout << "This is Motorola hex format test!" << endl;
}

int main()
{
	test_intel_hex();
	test_motorola();

	return 0;
}

